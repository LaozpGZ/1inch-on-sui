/**
 * Demo Control Panel for 1inch-on-Sui Hackathon
 * 
 * Features:
 * - Real-time demo mode management with auto-generation controls
 * - Live statistics dashboard with uptime monitoring  
 * - Manual event generation (auctions, swaps, notifications, balance updates)
 * - Advanced configuration settings (latency, success rate, real-time simulation)
 * - Service status monitoring with relayer integration
 * - Portfolio and cross-chain balance tracking
 * - Minimized and expanded view modes with keyboard shortcuts
 * - Comprehensive hackathon demonstration controls
 * 
 * @example
 * ```tsx
 * // Basic usage with minimization control
 * <DemoControlPanel 
 *   minimized={false} 
 *   onToggleMinimize={() => setMinimized(!minimized)} 
 * />
 * 
 * // Minimized floating control
 * <DemoControlPanel minimized={true} />
 * ```
 * 
 * @component
 * @author 1inch-on-Sui Hackathon Team
 */
"use client";

import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  CogIcon,
  PlayIcon,
  PauseIcon,
  ArrowPathIcon,
  ChartBarSquareIcon,
  BellIcon,
  CpuChipIcon,
  EyeIcon,
  EyeSlashIcon,
  SparklesIcon,
  SignalIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  InformationCircleIcon,
} from "@heroicons/react/24/outline";
import { useUnifiedStore, useDemoMode, useCrossChainBalances } from "~~/services/store/unifiedStore";
import { useNotifications } from "~~/components/ui/NotificationSystem";
import { unifiedRelayerService } from "~~/services/relayer/UnifiedRelayerService";

/**
 * Props for the Demo Control Panel component
 * 
 * @interface DemoControlPanelProps
 * @property {string} [className] - Additional CSS classes for styling
 * @property {boolean} [minimized=false] - Whether panel is in minimized state
 * @property {() => void} [onToggleMinimize] - Callback to toggle minimization
 */
interface DemoControlPanelProps {
  className?: string;
  minimized?: boolean;
  onToggleMinimize?: () => void;
}

export const DemoControlPanel: React.FC<DemoControlPanelProps> = ({
  className = "",
  minimized = false,
  onToggleMinimize,
}) => {
  const { ui, addAuctionNotification, generateMockData } = useUnifiedStore();
  const { 
    isDemoMode, 
    toggleDemoMode, 
    updateDemoConfig, 
    autoGenerateData,
    simulateRealTimeUpdates,
    mockLatency,
    successRate,
    enableMockNotifications
  } = useDemoMode();
  const { refreshBalances, isRefreshing, totalUSDCBalance, portfolioBreakdown } = useCrossChainBalances();
  const { notify } = useNotifications();

  // Demo control state management
  const [autoMode, setAutoMode] = useState(autoGenerateData); // Auto-generation toggle state
  const [isGenerating, setIsGenerating] = useState(false); // Manual event generation loading state
  const [showAdvanced, setShowAdvanced] = useState(false); // Advanced settings panel visibility
  const [stats, setStats] = useState({
    totalNotifications: 0, // Count of all notifications generated
    totalAuctions: 0, // Count of auction events (simulated)
    totalSwaps: 0, // Count of swap transactions (simulated)
    uptime: 0, // Demo session uptime in seconds
  });

  // Auto-generation intervals
  useEffect(() => {
    if (!isDemoMode || !autoMode) return;

    const intervals = [
      // Generate auction notifications
      setInterval(() => {
        if (Math.random() > 0.6) {
          addAuctionNotification({
            auctionId: `auto_auction_${Date.now()}`,
            type: Math.random() > 0.5 ? 'bid_placed' : 'price_alert',
            message: `Auto-generated: ${(3.5 + Math.random() * 0.5).toFixed(4)} SUI/USDC`,
          });
        }
      }, 12000),

      // Generate general notifications
      setInterval(() => {
        if (Math.random() > 0.7) {
          generateMockData();
        }
      }, 8000),

      // Refresh balances occasionally
      setInterval(() => {
        if (Math.random() > 0.8) {
          refreshBalances();
        }
      }, 25000),
    ];

    return () => intervals.forEach(clearInterval);
  }, [isDemoMode, autoMode, addAuctionNotification, generateMockData, refreshBalances]);

  // Update stats
  useEffect(() => {
    const updateStats = () => {
      setStats(prev => ({
        totalNotifications: ui.toastNotifications.length,
        totalAuctions: 5 + Math.floor(Math.random() * 10),
        totalSwaps: 127 + Math.floor(Math.random() * 50),
        uptime: prev.uptime + 1,
      }));
    };

    const interval = setInterval(updateStats, 1000);
    return () => clearInterval(interval);
  }, [ui.toastNotifications.length]);

  const handleGenerateEvent = async (type: 'auction' | 'swap' | 'notification' | 'balance') => {
    setIsGenerating(true);
    
    try {
      switch (type) {
        case 'auction':
          addAuctionNotification({
            auctionId: `manual_auction_${Date.now()}`,
            type: 'bid_placed',
            message: `Manual bid: ${(3.6 + Math.random() * 0.4).toFixed(4)} SUI/USDC`,
          });
          notify.success("Event Generated", "New auction bid simulated");
          break;
          
        case 'swap':
          const mockControls = unifiedRelayerService.getMockControls();
          if (mockControls) {
            const newSwap = mockControls.addRandomSwap();
            notify.success("Swap Generated", `New swap created: ${newSwap.id.slice(-8)}`);
          }
          break;
          
        case 'notification':
          generateMockData();
          break;
          
        case 'balance':
          await refreshBalances(true);
          notify.info("Balances Refreshed", "Updated cross-chain balance data");
          break;
      }
    } catch (error) {
      notify.error("Generation Failed", "Could not generate demo event");
    } finally {
      setTimeout(() => setIsGenerating(false), 500);
    }
  };

  const handleConfigUpdate = (updates: any) => {
    updateDemoConfig(updates);
    notify.info("Config Updated", "Demo settings have been updated");
  };

  const relayerInfo = unifiedRelayerService.getServiceInfo();

  if (minimized) {
    return (
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        className={`fixed bottom-4 right-4 z-40 ${className}`}
      >
        <motion.button
          onClick={onToggleMinimize}
          className="btn btn-circle btn-primary shadow-lg"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          <CogIcon className="w-6 h-6" />
        </motion.button>
        
        {isDemoMode && (
          <motion.div
            className="absolute -top-2 -right-2"
            animate={{ scale: [1, 1.2, 1] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          </motion.div>
        )}
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`bg-white rounded-xl shadow-lg border border-gray-200 ${className}`}
    >
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 px-6 py-4 rounded-t-xl border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-100 rounded-lg">
              <CpuChipIcon className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Demo Control Panel</h3>
              <p className="text-sm text-gray-600">Hackathon demonstration controls</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <motion.div
              className={`px-3 py-1 rounded-full text-xs font-medium ${
                isDemoMode 
                  ? 'bg-green-100 text-green-700' 
                  : 'bg-gray-100 text-gray-600'
              }`}
              animate={{ 
                backgroundColor: isDemoMode ? "#dcfce7" : "#f3f4f6",
                scale: isDemoMode ? [1, 1.05, 1] : 1
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              {isDemoMode ? '🎭 DEMO ACTIVE' : '⚪ DEMO OFF'}
            </motion.div>
            
            {onToggleMinimize && (
              <button
                onClick={onToggleMinimize}
                className="btn btn-sm btn-ghost"
              >
                <EyeSlashIcon className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
      </div>

      <div className="p-6 space-y-6">
        {/* Demo Mode Toggle */}
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <ExclamationTriangleIcon className="w-5 h-5 text-yellow-600" />
              <span className="font-medium text-yellow-800">Demo Mode Control</span>
            </div>
            <button
              onClick={toggleDemoMode}
              className={`btn btn-sm ${isDemoMode ? 'btn-success' : 'btn-outline'}`}
            >
              {isDemoMode ? 'Disable Demo' : 'Enable Demo'}
            </button>
          </div>
          
          <p className="text-sm text-yellow-700 mb-3">
            {isDemoMode 
              ? "Demo mode is active. All data is simulated for hackathon demonstration."
              : "Demo mode is disabled. Enable to show simulated real-time functionality."
            }
          </p>
          
          {isDemoMode && (
            <div className="flex items-center space-x-4">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={autoMode}
                  onChange={(e) => {
                    setAutoMode(e.target.checked);
                    handleConfigUpdate({ autoGenerateData: e.target.checked });
                  }}
                  className="mr-2"
                />
                <span className="text-sm">Auto-generate events</span>
              </label>
              
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={enableMockNotifications}
                  onChange={(e) => handleConfigUpdate({ enableMockNotifications: e.target.checked })}
                  className="mr-2"
                />
                <span className="text-sm">Mock notifications</span>
              </label>
            </div>
          )}
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-blue-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">{stats.totalNotifications}</div>
            <div className="text-xs text-blue-500">Notifications</div>
          </div>
          <div className="bg-green-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">{stats.totalAuctions}</div>
            <div className="text-xs text-green-500">Auctions</div>
          </div>
          <div className="bg-purple-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-purple-600">{stats.totalSwaps}</div>
            <div className="text-xs text-purple-500">Swaps</div>
          </div>
          <div className="bg-orange-50 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-orange-600">
              {Math.floor(stats.uptime / 60)}:{(stats.uptime % 60).toString().padStart(2, '0')}
            </div>
            <div className="text-xs text-orange-500">Uptime</div>
          </div>
        </div>

        {/* Service Status */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium mb-3 flex items-center">
            <SignalIcon className="w-4 h-4 mr-2" />
            Service Status
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div className="flex justify-between">
              <span>Relayer Service:</span>
              <span className={`badge badge-xs ${relayerInfo.type === 'mock' ? 'badge-info' : 'badge-success'}`}>
                {relayerInfo.type === 'mock' ? 'Mock' : 'Real'}
              </span>
            </div>
            <div className="flex justify-between">
              <span>Portfolio Value:</span>
              <span className="font-medium">${portfolioBreakdown.values ? 
                (portfolioBreakdown.values.ethereum + portfolioBreakdown.values.sui).toFixed(2) : '0.00'}</span>
            </div>
            <div className="flex justify-between">
              <span>USDC Balance:</span>
              <span className="font-medium">{totalUSDCBalance.total.toFixed(2)} USDC</span>
            </div>
            <div className="flex justify-between">
              <span>Network Distribution:</span>
              <span className="text-xs">
                ETH: {portfolioBreakdown.ethereum.toFixed(0)}% | SUI: {portfolioBreakdown.sui.toFixed(0)}%
              </span>
            </div>
          </div>
        </div>

        {/* Demo Actions */}
        {isDemoMode && (
          <div className="space-y-4">
            <h4 className="font-medium flex items-center">
              <SparklesIcon className="w-4 h-4 mr-2" />
              Generate Demo Events
            </h4>
            
            <div className="grid grid-cols-2 gap-3">
              <motion.button
                onClick={() => handleGenerateEvent('auction')}
                disabled={isGenerating}
                className="btn btn-sm btn-outline"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                🏛️ Auction Bid
              </motion.button>
              
              <motion.button
                onClick={() => handleGenerateEvent('swap')}
                disabled={isGenerating}
                className="btn btn-sm btn-outline"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                🔄 New Swap
              </motion.button>
              
              <motion.button
                onClick={() => handleGenerateEvent('notification')}
                disabled={isGenerating}
                className="btn btn-sm btn-outline"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                🔔 Notification
              </motion.button>
              
              <motion.button
                onClick={() => handleGenerateEvent('balance')}
                disabled={isGenerating || isRefreshing}
                className="btn btn-sm btn-outline"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                {isRefreshing ? (
                  <ArrowPathIcon className="w-4 h-4 animate-spin" />
                ) : (
                  "💰 Refresh Balances"
                )}
              </motion.button>
            </div>

            {/* Advanced Settings */}
            <div>
              <button
                onClick={() => setShowAdvanced(!showAdvanced)}
                className="btn btn-xs btn-ghost mb-3"
              >
                Advanced Settings {showAdvanced ? '▲' : '▼'}
              </button>
              
              <AnimatePresence>
                {showAdvanced && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="bg-gray-50 rounded-lg p-3 space-y-3"
                  >
                    <div>
                      <label className="block text-xs font-medium mb-1">
                        Mock Latency: {mockLatency}ms
                      </label>
                      <input
                        type="range"
                        min="50"
                        max="2000"
                        value={mockLatency}
                        onChange={(e) => handleConfigUpdate({ mockLatency: Number(e.target.value) })}
                        className="w-full"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium mb-1">
                        Success Rate: {(successRate * 100).toFixed(1)}%
                      </label>
                      <input
                        type="range"
                        min="0"
                        max="1"
                        step="0.05"
                        value={successRate}
                        onChange={(e) => handleConfigUpdate({ successRate: Number(e.target.value) })}
                        className="w-full"
                      />
                    </div>
                    
                    <label className="flex items-center text-sm">
                      <input
                        type="checkbox"
                        checked={simulateRealTimeUpdates}
                        onChange={(e) => handleConfigUpdate({ simulateRealTimeUpdates: e.target.checked })}
                        className="mr-2"
                      />
                      Real-time simulation
                    </label>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>
        )}

        {/* Information */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start space-x-2">
            <InformationCircleIcon className="w-5 h-5 text-blue-600 mt-0.5" />
            <div className="text-sm text-blue-800">
              <p className="font-medium mb-1">Hackathon Demo Environment</p>
              <p>
                This control panel manages the demonstration environment for the 1inch-on-Sui hackathon project. 
                Enable demo mode to show real-time cross-chain atomic swap functionality with simulated data.
              </p>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default DemoControlPanel;